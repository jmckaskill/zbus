include config.ninja

rule test
    command = $in -z $out || cat $out

# common simple rules
# create custom rules if you need different flags for a target

rule cc
    depfile = $out.d
    deps = gcc
    command = $cc -c $in -o $out -MD -MF $out.d $cflags
    description = CC $out

rule ld
    command = $ld $ldflags -o $out $in
    description = LD $out

rule ar
    command = rm -f $out && $ar $out $in
    description = AR $out


# lib

build obj/lib/auth.o:       cc lib/auth.c
build obj/lib/bus.o:        cc lib/bus.c
build obj/lib/log.o:        cc lib/log.c
build obj/lib/marshal.o:    cc lib/marshal.c
build obj/lib/message.o:    cc lib/message.c
build obj/lib/parse.o:      cc lib/parse.c
build obj/lib/stream.o:     cc lib/stream.c
build obj/lib/str.o:        cc lib/str.c
build obj/lib/unix.o:       cc lib/unix.c

build obj/lib.a: ar $
        obj/lib/auth.o $
        obj/lib/bus.o $
        obj/lib/log.o $
        obj/lib/marshal.o $
        obj/lib/message.o $
        obj/lib/parse.o $
        obj/lib/stream.o $
        obj/lib/str.o $
        obj/lib/unix.o $


# sockbusd


build obj/sockbusd/daemon.o: cc cmd/sockbusd/daemon.c

build bin/sockbusd: ld $
        obj/sockbusd/daemon.o $
        obj/lib.a $


#sockbusp

build obj/sockbusp/proxy.o: cc cmd/sockbusp/proxy.c

build obj/sockbusp.test: test bin/sockbusp

build bin/sockbusp: ld $
        obj/sockbusp/proxy.o $
        obj/lib.a $

#sockbusp

build obj/sockbus/client.o: cc cmd/sockbus/client.c

build bin/sockbus: ld $
        obj/sockbus/client.o $
        obj/lib.a $


# default targets

default bin/sockbusp bin/sockbusd bin/sockbus
build test: phony $
    obj/sockbusp.test $



