include config.ninja

rule test
    command = $in -z $out || cat $out

# lib

rule cc_lib
    depfile = $out.d
    deps = gcc
    command = $cc -c $in -o $out -MD -MF $out.d $cflags

rule ar_lib
    command = rm -f $out && $ar $out $in

build obj/lib/auth.o:      cc_lib lib/auth.c
build obj/lib/log.o:       cc_lib lib/log.c
build obj/lib/marshal.o:   cc_lib lib/marshal.c
build obj/lib/message.o:   cc_lib lib/message.c
build obj/lib/parse.o:     cc_lib lib/parse.c
build obj/lib/stream.o:    cc_lib lib/stream.c
build obj/lib/types.o:     cc_lib lib/types.c
build obj/lib/unix.o:      cc_lib lib/unix.c

build obj/lib.a: ar_lib $
        obj/lib/auth.o $
        obj/lib/log.o $
        obj/lib/marshal.o $
        obj/lib/message.o $
        obj/lib/parse.o $
        obj/lib/stream.o $
        obj/lib/types.o $
        obj/lib/unix.o $


# sockbusd

rule cc_sockbusd
    depfile = $out.d
    deps = gcc
    command = $cc -c $in -o $out -MD -MF $out.d $cflags

rule ld_sockbusd
    command = $ld $ldflags -o $out $in

build obj/sockbusd/daemon.o: cc_sockbusd cmd/sockbusd/daemon.c

build bin/sockbusd: ld_sockbusd $
        obj/sockbusd/daemon.o $


#sockbusp

rule cc_sockbusp
    depfile = $out.d
    deps = gcc
    command = $cc -c $in -o $out -MD -MF $out.d $cflags

rule ld_sockbusp
    command = $ld $ldflags -o $out $in

build obj/sockbusp/proxy.o:     cc_sockbusp cmd/sockbusp/proxy.c

build obj/sockbusp.test: test bin/sockbusp

build bin/sockbusp: ld_sockbusp $
        obj/sockbusp/proxy.o $
        obj/lib.a $


# default targets

default bin/sockbusp bin/sockbusd
build test: phony $
    obj/sockbusp.test $



