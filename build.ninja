include config.ninja

rule test
    command = $in -z $out || cat $out

# common simple rules
# create custom rules if you need different flags for a target

rule cc
    depfile = $out.d
    deps = gcc
    command = $cc -c $in -o $out -MD -MF $out.d $cflags
    description = CC $out

rule ld
    command = $ld $ldflags -o $out $in
    description = LD $out

rule ar
    command = rm -f $out && $ar $out $in
    description = AR $out

# dmem
build obj/dmem/vector.o: cc dmem/vector.c
build obj/dmem.a: ar obj/dmem/vector.o

# lib

build obj/lib/auth.o:       cc lib/auth.c
build obj/lib/decode.o:     cc lib/decode.c
build obj/lib/encode.o:     cc lib/encode.c
build obj/lib/str.o:        cc lib/str.c

build obj/lib.a: ar $
        obj/lib/auth.o $
        obj/lib/decode.o $
        obj/lib/encode.o $
        obj/lib/str.o $

# bus

build obj/bus/bus.o:                cc bus/bus.c
build obj/bus/log.o:                cc bus/log.c
build obj/bus/main.o:               cc bus/main.c
build obj/bus/messages.o:           cc bus/messages.c
build obj/bus/msgq.o:               cc bus/msgq.c
build obj/bus/page.o:               cc bus/page.c
build obj/bus/remote.o:             cc bus/remote.c
build obj/bus/remote-auth.o:        cc bus/remote-auth.c
build obj/bus/remote-interface.o:   cc bus/remote-interface.c
build obj/bus/remote-recv.o:        cc bus/remote-recv.c
build obj/bus/remote-send.o:        cc bus/remote-send.c
build obj/bus/rcu.o:                cc bus/rcu.c
build obj/bus/unix.o:               cc bus/unix.c

build bin/bus: ld $
        obj/bus/bus.o $
        obj/bus/log.o $
        obj/bus/main.o $
        obj/bus/messages.o $
        obj/bus/msgq.o $
        obj/bus/page.o $
        obj/bus/remote.o $
        obj/bus/remote-auth.o $
        obj/bus/remote-interface.o $
        obj/bus/remote-recv.o $
        obj/bus/remote-send.o $
        obj/bus/rcu.o $
        obj/bus/unix.o $
        obj/dmem.a $
        obj/lib.a $


# default targets

default bin/bus
build test: phony $



